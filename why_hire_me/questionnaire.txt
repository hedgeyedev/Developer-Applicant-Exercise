How many years of Web development experience do you have?
2 years. I am just starting to work on projects for companies using Javascript and Ruby on Rails. 

How many years of JavaScript experience do you have?
1

How many years of Ruby experience do you have?
2

How many years of Rails development experience do you have?
2

What are your opinions on Agile software development?

I strongly believe the Agile philosophy is giving strong foundations to software development teams to stay efficient and healthy. Now more than ever, we realize the real value of a company is in its people and their adaptability, so a good communication and flexibility over planning and controlling is crucial. 

I am particularly sensitive to the collaboration chapter and value face-to-face communication. This is why I attend several meetups a week and look actively to pair with programmers. But I believe, more importantly, that Agile principles should be seen as pillars supporting the sucess of a team, and removing one of these pillars strongly endangers the overall balance. This is why a constant introspection at both the personal and team level is important in keeping agile principles alive in the work environment. 

In the end, it comes to the commitment level of each and everyone of us to be a doer; to be patient, open, deeply involved, trusting others, welcoming change and having the self-reflection needed to improve.
Not surprsingly, this mindset is key to success and happiness, not only in software development but in other fields as well as in our personal lives.


TDD or BDD?

Both approaches have their pros and cons, and rather than choosing one or the other, I believe a balance of both is often the answer. 

As my training was focusing on TDD, I am used to this approach but definitely see a big value in BDD. 
I believe the test syntax is more understandable for anyone unfamiliar with the code, which greatly helps collaboration and maintainability of the application. 
It also gives a pretty good view of what the application is expected to do, which goes beyond the testing work itself.
The syntax context/event/outcomes in almost plain english is also allowing non-technical team members to write down the expected behavior which can be easily translated by a programmer.  Overall, it seem easier to know what you want to test ahead of writing any code in the BDD option. 
Another value I can see in the BDD is to focus on writing just enough code to get the desired behavior. TDD forces us to mock dependencies and can lead to excessive code writing to ensure tests/future tests will pass. 

On the downside, we need to redefine the whole context for different expected behaviours. These tests are slower to run as we are testing the system as a whole, and obvisouly they don't give much detail about what went wrong, while the unit testing is focusing on revealing the root cause of failure. 

For me, it comes down to the level of complexity and maintainability needed for the feature as well as the confidence the developer has in retracing the root cause in case of failure. 

What are you looking for in a job?

I am looking for the right company before the right job. I usually apply to positions where the company describes their environment as fast-paced and team oriented. I thrive in a supportive, nuturing environment where I am given challenges, and this is why the environment itself is more important than the job description. 
My ideal position would allow my company to benefit from my Ruby on Rails skills, entrusting me with more and more complex projects. 
I am also looking to keep working with JavaScript and its libraries as I really enjoy working with APIs and dynamic UI features. 


Are you legal to work in the US?
yes - Green Card 

When can you start?
Now

