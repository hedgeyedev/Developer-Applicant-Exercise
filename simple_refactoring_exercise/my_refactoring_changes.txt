template.rb changes:
- Moved file to simple_refactoring_exercise/template_generators/code_template_service.rb to follow a rails service object style
- Renamed module TemplateGenerators to be consistent with filepath and reusable with future service objects that generate templates
- Refactored template function logic to CodeTemplateService class, subdividing logic into private functions to be more verbose and descriptive
- Refactored logic to replace %CODE% and %ALTCODE% to use gsub since it accomplishes the same result as per the spec requirements with a single line
- Added input code (oringally named req_id) length check and InvalidCodeError exeception to make sure that the input code in long enough to generate the altcode of length 9 as per the original code
- Removed Rakefile as it was not necessary for running the spec or using CodeTemplateService after refactoring

template_spec.rb changes:
- Setup test environment using Dockerfile and composefile in order to run the tests in a consistent environment accross machines
- Included bash scripts for starting and stopping the container once the image has been built
- Image must be built using with name and tag developer_applicant_exercise:latest
- test can be ran using `bundle exec rspec` inside the docker container
- Created .rspec file to include spec_helper.rb and output test results in documentation format by default
- Moved file to spec/simple_refactoring_exercise/template_generators/code_template_service_spec.rb to follow rspec best practice for having a single spec directory
- Updated original test to use let blocks so that there are descriptive variable names and make it easier to read
- Updated original test to describe the refactored service object
- Updated original test description to be more specific as to what it was actually testing
- Added additional test for the case where a code that is too short to generate an altcode is passed in
- Added byebug gem to spec_helper.rb for troubleshooting tests and code
