c
described_class.new(template: valid_input_template, code: invalid_code).perform
TemplateGenerators::InvalidCodeError
InvalidCodeError
c
described_class.new(template: 555, code: 555)
c
test = described_class.new(template: 'Code is %CODE%\; alt code is %ALTCODE%', code: '5678901234').perform
test = described_class.perform(template: 'Code is %CODE%\; alt code is %ALTCODE%', code: '5678901234')
test.perform
test = described_class.new(template: 'Code is %CODE%\; alt code is %ALTCODE%', code: '5678901234')
'%\;'
'%;'
'Code is %CODE%;'
'%A'
'%C'
'\%s'
test = described_class.new(template: "Code is \%CODE\%; alt code is \%ALTCODE\%", code: '5678901234')
test = described_class.new(template: 'Code is %CODE%; alt code is %ALTCODE%', code: '5678901234')
described_class
c
"Code is %CODE%; alt code is %ALTCODE%"
'Code is %CODE%; alt code is %ALTCODE%'
template = CodeTemplateService.perform('Code is %CODE%; alt code is %ALTCODE%', '5678901234')
TemplateGenerators::CodeTemplateService
c
TemplateGenerators
require "#{RSPEC_ROOT}simple_refactoring_exercise/template_generators/code_template_service.rb"
RSPEC_ROOT
c
RSPEC_ROOT
exit
TemplateGenerators
c
template_part_one + altcode + template_part_two
template_part_two
altcode
template_part_one
c
template
template.length
template
template[0..(template_split_begin-1)]
[0..(template_split_begin-1)]
0..(template_split_begin-1)
template[0..(template_split_begin-1)]
